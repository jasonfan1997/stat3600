tau=c(tau,bitcoinprice$date[i*10+1])
}
xphi = PieceLineBasis(bitcoinprice$date, tau)
matplot(bitcoinprice$date, cbind(xphi[,1:5],xphi[,ncol(xphi)-6:ncol(xphi)]), type="l", lty=2, lwd=2,  main="Piecewise Linear Bases")
xphi[,ncol(xphi)-6:ncol(xphi)]
xphi[,(ncol(xphi)-6):ncol(xphi)]
PieceLineBasis = function(x, tau){
xphi = pmin(pmax(x-min(x), 0), tau[1]-min(x))
for (k in 2:length(tau)) xphi = cbind(xphi, pmin(pmax(x-tau[k-1], 0), tau[k]-tau[k-1]))
xphi = cbind(xphi, pmax(x-tau[k], 0)/(3600*24))
return(xphi)
}
tau = c(bitcoinprice$date[11])
for(i in 2:(floor(dim(bitcoinprice)[1]/10)))
{
tau=c(tau,bitcoinprice$date[i*10+1])
}
xphi = PieceLineBasis(bitcoinprice$date, tau)
matplot(bitcoinprice$date, cbind(xphi[,1:5],xphi[,(ncol(xphi)-6):ncol(xphi)]), type="l", lty=2, lwd=2,  main="Piecewise Linear Bases")
PieceLineBasis = function(x, tau){
xphi = pmin(pmax(x-min(x), 0), tau[1]-min(x))
for (k in 2:length(tau)) xphi = cbind(xphi, pmin(pmax(x-tau[k-1], 0), tau[k]-tau[k-1]))
xphi = cbind(xphi, pmax(x-tau[k], 0)/(3600*24))
return(xphi)
}
tau = c(bitcoinprice$date[11])
for(i in 2:(floor(dim(bitcoinprice)[1]/10)))
{
tau=c(tau,bitcoinprice$date[i*10+1])
}
xphi = PieceLineBasis(bitcoinprice$date, tau)
matplot(bitcoinprice$date, cbind(xphi[,1:5],xphi[,(ncol(xphi)-5):ncol(xphi)]), type="l", lty=2, lwd=2,  main="Piecewise Linear Bases")
PieceLineBasis = function(x, tau){
xphi = pmin(pmax(x-min(x), 0), tau[1]-min(x))
for (k in 2:length(tau)) xphi = cbind(xphi, pmin(pmax(x-tau[k-1], 0), tau[k]-tau[k-1]))
xphi = cbind(xphi, pmax(x-tau[k], 0)/(3600*24))
return(xphi)
}
tau = c(bitcoinprice$date[11])
for(i in 2:(floor(dim(bitcoinprice)[1]/10)))
{
tau=c(tau,bitcoinprice$date[i*10+1])
}
xphi = PieceLineBasis(bitcoinprice$date, tau)
matplot(bitcoinprice$date, cbind(xphi[,1:5],xphi[,(ncol(xphi)-4):ncol(xphi)]), type="l", lty=2, lwd=2,  main="Piecewise Linear Bases")
plot(bitcoinprice$date, cbind(xphi[,1:5],xphi[,(ncol(xphi)-4):ncol(xphi)]), type="l", lty=2, lwd=2,  main="Piecewise Linear Bases")
PieceLineBasis = function(x, tau){
xphi = pmin(pmax(x-min(x), 0), tau[1]-min(x))
for (k in 2:length(tau)) xphi = cbind(xphi, pmin(pmax(x-tau[k-1], 0), tau[k]-tau[k-1]))
xphi = cbind(xphi, pmax(x-tau[k], 0)/(3600*24))
return(xphi)
}
tau = c(bitcoinprice$date[11])
for(i in 2:(floor(dim(bitcoinprice)[1]/10)))
{
tau=c(tau,bitcoinprice$date[i*10+1])
}
xphi = PieceLineBasis(bitcoinprice$date, tau)
matplot(bitcoinprice$date, cbind(xphi[,1:5],xphi[,(ncol(xphi)-4):ncol(xphi)]), type="l", lty=2, lwd=2,  main="Piecewise Linear Bases",xaxt="n")
PieceLineBasis = function(x, tau){
xphi = pmin(pmax(x-min(x), 0), tau[1]-min(x))
for (k in 2:length(tau)) xphi = cbind(xphi, pmin(pmax(x-tau[k-1], 0), tau[k]-tau[k-1]))
xphi = cbind(xphi, pmax(x-tau[k], 0)/(3600*24))
return(xphi)
}
tau = c(bitcoinprice$date[11])
for(i in 2:(floor(dim(bitcoinprice)[1]/10)))
{
tau=c(tau,bitcoinprice$date[i*10+1])
}
xphi = PieceLineBasis(bitcoinprice$date, tau)
matplot(bitcoinprice$date, cbind(xphi[,1:5],xphi[,(ncol(xphi)-4):ncol(xphi)]), type="l", lty=2, lwd=2,  main="Piecewise Linear Bases",xaxt="n")
timelabels<-format(bitcoinprice$date,"%H:%M")
axis(1,at=bitcoinprice$date,labels=timelabels)
View(bitcoinprice)
PieceLineBasis = function(x, tau){
xphi = pmin(pmax(x-min(x), 0), tau[1]-min(x))
for (k in 2:length(tau)) xphi = cbind(xphi, pmin(pmax(x-tau[k-1], 0), tau[k]-tau[k-1]))
xphi = cbind(xphi, pmax(x-tau[k], 0)/(3600*24))
return(xphi)
}
tau = c(bitcoinprice$date[11])
for(i in 2:(floor(dim(bitcoinprice)[1]/10)))
{
tau=c(tau,bitcoinprice$date[i*10+1])
}
xphi = PieceLineBasis(bitcoinprice$date, tau)
matplot(bitcoinprice$date, cbind(xphi[,1:5],xphi[,(ncol(xphi)-4):ncol(xphi)]), type="l", lty=2, lwd=2,  main="Piecewise Linear Bases",xaxt="n")
timelabels<-format(bitcoinprice$date,"%Y-%m-%d")
axis(1,at=bitcoinprice$date,labels=timelabels)
matplot(bitcoinprice$date, cbind(xphi[,1:5],xphi[,(ncol(xphi)-4):ncol(xphi)]), type="l", lty=2, lwd=2,  main="Piecewise Linear Bases",xaxt="n")
timelabels<-format(bitcoinprice$date,"%Y-%m-%d")
axis(1,at=bitcoinprice$date,labels=timelabels)
ss = exp(seq(-10, 0,  by=0.1))
lassofit = glmnet(bitcoinprice$date, bitcoinprice$price, lambda = ss)
library(readr)
library(ggplot2)
library(glmnet)
install.packages("glmnet")
library(readr)
library(ggplot2)
library(glmnet)
bitcoinprice <- read_csv("BitCoin.csv",col_names = FALSE)
colnames(bitcoinprice) <- c("date", "price")
ss = exp(seq(-10, 0,  by=0.1))
lassofit = glmnet(bitcoinprice$date, bitcoinprice$price, lambda = ss)
bitcoinprice$date
ss = exp(seq(-10, 0,  by=0.1))
lassofit = glmnet(xphi, bitcoinprice$price, lambda = ss)
plot.glmnet(lassofit, xvar="lambda", label=T)
plot.glmnet(lassofit, xvar="norm", label=T)
plot.glmnet(lassofit, xvar="norm", label=T)
lassofit
View(lassofit)
lassofit$a0
plot.glmnet(lassofit, xvar="norm", label=T)
plot.glmnet(lassofit, xvar="norm", label=T)
plot.glmnet(lassofit, xvar="lambda", label=T)
lassofit$lambda
coef(lassofit)
coef(lassofit,s=0)
c=abs(coef(lassofit,s=0))
View(c)
coef(lassofit,s=0)
coef(lassofit,s=0)$x
c=coef(lassofit,s=0)
c$x
c@x
tempabs(c@x)
temp=abs(c@x)
temp=temp[2:28]
temp=abs(c@x)
temp=temp[2:38]
lapply
t <- data.frame(col1=c(1:37), col2=temp)
View(t)
t=df
df[order(df$col2, decreasing = TRUE)[sort(unique(df$col2))], , drop = FALSE]
col2
t <- data.frame(col1=c(1:37), col2=temp)
df=t
df[order(df$col2, decreasing = TRUE)[sort(unique(df$col2))], , drop = FALSE]
col2
lst <- sort(df$col2, index.return=TRUE, decreasing=TRUE)
lapply(lst, `[`, lst$x %in% head(unique(lst$x),3))
lst <- sort(df$col2, index.return=TRUE, decreasing=TRUE)
lapply(lst, `[`, lst$x %in% head(unique(lst$x),18))
temp=abs(coef(lassofit,s=0)@x)
temp=temp[2:38]
df=data.frame(col1=c(1:37), col2=temp)
lst <- sort(df$col2, index.return=TRUE, decreasing=TRUE)
index=lapply(lst, `[`, lst$x %in% head(unique(lst$x),18))$ix
xphi[,index]
temp=abs(coef(lassofit,s=0)@x)
temp=temp[2:38]
df=data.frame(col1=c(1:37), col2=temp)
lst <- sort(df$col2, index.return=TRUE, decreasing=TRUE)
index=lapply(lst, `[`, lst$x %in% head(unique(lst$x),18))$ix
newxphi=xphi[,index]
lm( bitcoinprice$price,newxphi)
lm( bitcoinprice$price~newxphi)
q=lm( bitcoinprice$price~newxphi)
matplot(bitcoinprice$date,cbing(q$fitted.values,bitcoinprice$price))
matplot(bitcoinprice$date,cbind(q$fitted.values,bitcoinprice$price))
matplot(bitcoinprice$date,cbind(q$fitted.values,bitcoinprice$price), type="l")
temp=abs(coef(lassofit,s=0)@x)
temp=temp[2:38]
df=data.frame(col1=c(1:37), col2=temp)
lst <- sort(df$col2, index.return=TRUE, decreasing=TRUE)
index=lapply(lst, `[`, lst$x %in% head(unique(lst$x),18))$ix
newxphi=xphi[,index]
model=lm( bitcoinprice$price~newxphi)
matplot(bitcoinprice$date,cbind(q$fitted.values,bitcoinprice$price), type="l")
temp=abs(coef(lassofit,s=0)@x)
temp=temp[2:38]
df=data.frame(col1=c(1:37), col2=temp)
lst <- sort(df$col2, index.return=TRUE, decreasing=TRUE)
index=lapply(lst, `[`, lst$x %in% head(unique(lst$x),18))$ix
newxphi=xphi[,index]
model=lm( bitcoinprice$price~newxphi)
matplot(bitcoinprice$date,cbind(q$fitted.values,bitcoinprice$price), type="l")
cv.glmnet(xphi, bitcoinprice$price,nfolds=5)
cvresult=cv.glmnet(xphi, bitcoinprice$price,nfolds=5)
plot(cvresult)
model = glmnet(xphi, bitcoinprice$price, lambda = lam)
cvresult=cv.glmnet(xphi, bitcoinprice$price,nfolds=5)
lam=cvresult$lambda.min
model = glmnet(xphi, bitcoinprice$price, lambda = lam)
cv.glmnet(xphi, bitcoinprice$price,nfolds=5)
reponse=prdict(model,xphi)
reponse=predict(model,xphi)
cvresult=cv.glmnet(xphi, bitcoinprice$price,nfolds=5)
lam=cvresult$lambda.min
model = glmnet(xphi, bitcoinprice$price, lambda = lam)
reponse=predict(model,xphi)
matplot(bitcoinprice$date,cbind(reponse,bitcoinprice$price), type="l")
temp=abs(coef(lassofit,s=0)@x)
temp=temp[2:38]
df=data.frame(col1=c(1:37), col2=temp)
lst <- sort(df$col2, index.return=TRUE, decreasing=TRUE)
index=lapply(lst, `[`, lst$x %in% head(unique(lst$x),18))$ix
newxphi=xphi[,index]
model=lm( bitcoinprice$price~newxphi)
matplot(bitcoinprice$date,cbind(q$fitted.values,bitcoinprice$price), type="l")
temp=abs(coef(lassofit,s=0)@x)
temp=temp[2:38]
df=data.frame(col1=c(1:37), col2=temp)
lst <- sort(df$col2, index.return=TRUE, decreasing=TRUE)
index=lapply(lst, `[`, lst$x %in% head(unique(lst$x),18))$ix
newxphi=xphi[,index]
model=lm( bitcoinprice$price~newxphi)
reponse=q$fitted.values
matplot(bitcoinprice$date,cbind(reponse,bitcoinprice$price), type="l")
q$fitted.values
reponse=q$fitted.values
reponse[1]
q$fitted.values[1]
reponse=c(q$fitted.values)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(ggplot2)
library(glmnet)
bitcoinprice <- read_csv("BitCoin.csv",col_names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(ggplot2)
bitcoinprice <- read_csv("BitCoin.csv",col_names = FALSE)
colnames(bitcoinprice) <- c("date", "price")
ggplot(bitcoinprice,aes(date,price))+
geom_line(aes(color=2))+
ylab('USD')+
labs(title = "Average USD marker price across major bitcoin exchange.", subtitle = "Source:blockchain.info")+ geom_smooth()+ theme(axis.title.x=element_blank(),axis.ticks.x=element_blank(),panel.border = element_blank(),legend.position="none",panel.background = element_blank(),panel.grid.major.y = element_line(colour="gray", size=0.05),plot.title = element_text(hjust = 0.5),plot.subtitle =element_text(hjust = 0.5) )
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(ggplot2)
library(glmnet)
bitcoinprice <- read_csv("BitCoin.csv",col_names = FALSE)
colnames(bitcoinprice) <- c("date", "price")
PieceLineBasis = function(x, tau){
xphi = pmin(pmax(x-min(x), 0), tau[1]-min(x))
for (k in 2:length(tau)) xphi = cbind(xphi, pmin(pmax(x-tau[k-1], 0), tau[k]-tau[k-1]))
xphi = cbind(xphi, pmax(x-tau[k], 0)/(3600*24))
return(xphi)
}
tau = c(bitcoinprice$date[11])
for(i in 2:(floor(dim(bitcoinprice)[1]/10)))
{
tau=c(tau,bitcoinprice$date[i*10+1])
}
xphi = PieceLineBasis(bitcoinprice$date, tau)
matplot(bitcoinprice$date, cbind(xphi[,1:5],xphi[,(ncol(xphi)-4):ncol(xphi)]), type="l", lty=2, lwd=2,  main="Piecewise Linear Bases",xaxt="n")
timelabels<-format(bitcoinprice$date,"%Y-%m-%d")
axis(1,at=bitcoinprice$date,labels=timelabels)
temp=abs(coef(lassofit,s=0)@x)
ss = exp(seq(-10, 0,  by=0.1))
lassofit = glmnet(xphi, bitcoinprice$price, lambda = ss)
plot.glmnet(lassofit, xvar="norm", label=T)
plot.glmnet(lassofit, xvar="lambda", label=T)
temp=abs(coef(lassofit,s=0)@x)
temp=temp[2:38]
df=data.frame(col1=c(1:37), col2=temp)
lst <- sort(df$col2, index.return=TRUE, decreasing=TRUE)
index=lapply(lst, `[`, lst$x %in% head(unique(lst$x),18))$ix
newxphi=xphi[,index]
model=lm( bitcoinprice$price~newxphi)
matplot(bitcoinprice$date,cbind(model$fitted.values,bitcoinprice$price), type="l")
View(xphi)
View(newxphi)
result <- read.csv("C:/Users/user98/Desktop/stat/result.csv")
View(result)
install.packages('keras')
library(keraas)
library(keras)
library(keras)
mnist <- dataset_mnist()
trainx=mnist$train$x[mnist$train$y==4 || mnist$train$y==9]
mnist$train$x[mnist$train$y==4 || mnist$train$y==9]
mnist$train$y==4 || mnist$train$y==9
mnist$train$y==4
mnist$train$y==4 | mnist$train$y==9
trainx=mnist$train$x[mnist$train$y==4 | mnist$train$y==9]
mnist$train$x[][][mnist$train$y==4 | mnist$train$y==9]
mnist$train$x[mnist$train$y==4 | mnist$train$y==9]
mnist$train$x[mnist$train$y==4 | mnist$train$y==9,,]
trainx=mnist$train$x[mnist$train$y==4 | mnist$train$y==9,,]
trainy=mnist$train$y[mnist$train$y==4 | mnist$train$y==9,,]
trainy=mnist$train$y[mnist$train$y==4 | mnist$train$y==9,,]
trainy=mnist$train$y[mnist$train$y==4 | mnist$train$y==9]
trainy==4
length(trainy[trainy==4])
library(keras)
mnist <- dataset_mnist()
trainx=mnist$train$x[mnist$train$y==4 | mnist$train$y==9,,]
trainy=mnist$train$y[mnist$train$y==4 | mnist$train$y==9]
testx=mnist$test$x[mnist$test$y==4 | mnist$test$y==9,,]
testy=mnist$test$y[mnist$test$y==4 | mnist$test$y==9]
print("samlpe size of digit 4 in training set=")
print(length(trainy[trainy==4]))
print("samlpe size of digit 9 in training set=")
print(length(trainy[trainy==9]))
print("samlpe size of digit 4 in testing set=")
print(length(testy[testy==4]))
print("samlpe size of digit 9 in testing set=")
print(length(testy[testy==9]))
library(keras)
mnist <- dataset_mnist()
trainx=mnist$train$x[mnist$train$y==4 | mnist$train$y==9,,]
trainy=mnist$train$y[mnist$train$y==4 | mnist$train$y==9]
testx=mnist$test$x[mnist$test$y==4 | mnist$test$y==9,,]
testy=mnist$test$y[mnist$test$y==4 | mnist$test$y==9]
print("samlpe size of digit 4 in training set=")
print(length(trainy[trainy==4]))
print("samlpe size of digit 9 in training set=")
print(length(trainy[trainy==9]))
print("samlpe size of digit 4 in testing set=")
print(length(testy[testy==4]))
print("samlpe size of digit 9 in testing set=")
print(length(testy[testy==9]))
for (i in c(4,9)) {
idx = which(testy == i)
for (j in sample(length(idx), 5))
plot(as.raster(testx[idx[j],,], max = 255))
}
TrainY = to_categorical(trainy)
View(TrainY)
trainy[trainy==4]=0
trainy[trainy==9]=1
TrainY = to_categorical(train_labels)
TrainY = to_categorical(trainy)
View(TrainY)
TrainX = array_reshape(trainx, c(length(trainx), 784))/255
length(trainx)
TrainX = array_reshape(trainx, c(length(trainy), 784))/255
trainy[trainy==4]=0
trainy[trainy==9]=1
TrainY = to_categorical(trainy)
TestX = array_reshape(testx, c(length(testy), 784))/255
testy[testy==4]=0
testy[testy==9]=1
TestY = to_categorical(testy)
library(pROC)
TrainX = array_reshape(trainx, c(length(trainy), 784))/255
trainy[trainy==4]=0
trainy[trainy==9]=1
TrainY = to_categorical(trainy)
TestX = array_reshape(testx, c(length(testy), 784))/255
testy[testy==4]=0
testy[testy==9]=1
TestY = to_categorical(testy)
network <- keras_model_sequential() %>%
layer_dense(units = 2, activation = "sigmoid", input_shape = c(784))
network %>% compile(
optimizer = "rmsprop",
loss = "categorical_crossentropy",
metrics = c("accuracy")
)
history <- network %>% fit(TrainX, TrainY, epochs = 20, batch_size = 128,verbose = 0)
plot(history)
network %>% evaluate(TestX, TestY)
proba=predict_proba(network,TestX)
roc1 = roc(TestY ~ proba)
plot(roc1, legacy.axes = TRUE, col=2, main="ROC Curves")
print("auc sorce=")
print(roc1$auc)
plot(roc1, legacy.axes = TRUE, col=2, main="ROC Curves")
legend("bottomright", paste(" (AUC: ",
roc1$auc, ")", sep=""))
plot(roc1, legacy.axes = TRUE, col=2, main="ROC Curves",xlim=c(0, 1), ylim=c(0, 1))
plot(roc1, legacy.axes = TRUE, col=2, main="ROC Curves",xlim=c(1,0), ylim=c(0,1))
TestY = to_categorical(testy)
network <- keras_model_sequential() %>%
layer_dense(units = 100, activation = "relu", input_shape = c(784)) %>%
layer_dense(units = 2, activation = "sigmoid")
network %>% compile(
optimizer = "rmsprop",
loss = "categorical_crossentropy",
metrics = c("accuracy")
)
history <- network %>% fit(TrainX, TrainY, epochs = 20, batch_size = 128,verbose = 0)
plot(history)
network %>% evaluate(TestX, TestY)
proba=predict_proba(network,TestX)
roc1 = roc(TestY ~ proba)
plot(roc1, legacy.axes = TRUE, col=2, main="ROC Curves")
print(roc1$auc)
df=read.csv("mcmcforstudent.csv")
setwd("C:/Users/user98/Desktop/learning/stat3600")
source('C:/Users/user98/Desktop/learning/stat3600/project.R')
View(X)
fit=lm(Y$the.eletricity.sell.amount.per.day~.,data = X)
View(fit)
fit$coefficients
a=fit$residuals
View(Y)
temp <- scale(X)
View(temp)
fit=lm(Y$the.eletricity.sell.amount.per.day~.,data = temp)
View(temp)
temp <- normalize(X)
temp
View(temp)
library(dplyr)
fit=lm(Y$the.eletricity.sell.amount.per.day~.,data = as.data.frame(temp))
)
fit=lm(Y$the.eletricity.sell.amount.per.day~.,data = as.data.frame(temp))
a=fit$residuals
a.mean()
a.mean
a
std(a)
sd(a)
View(Y)
fit
summarise(a)
summarise(fit)
summary(fit)
fit2=lm(Y$the.eletricity.sell.amount.per.day~.,data =X)
summary(fit2)
log(Y)
T=log(Y)
fit3=lm(T$the.eletricity.sell.amount.per.day~.,data =X)
summary(fit3)
View(X)
fit3=lm(T$the.eletricity.sell.amount.per.day~X$Position+X$Sign+X$convinence.stores+X$Demand+X$Num.of.Charger.open.in.day.time)
summary(fit3)
fit3=lm(T$the.eletricity.sell.amount.per.day~X$convinence.stores+X$Demand+X$Num.of.Charger.open.in.day.time)
summary(fit3)
fit3=lm(T$the.eletricity.sell.amount.per.day~X$Demand+X$Num.of.Charger.open.in.day.time)
summary(fit3)
View(X)
View(X)
write.csv(X, file = "X.csv")
write.csv(T, file = "logY.csv")
fit3=lm(T$the.eletricity.sell.amount.per.day~X$Position+X$Sign+X$convinence.stores+X$Demand+X$Num.of.Charger.open.in.day.time)
summary(fit3)
fit3=lm(Y$the.eletricity.sell.amount.per.day~X$Position+X$Sign+X$convinence.stores+X$Demand+X$Num.of.Charger.open.in.day.time)
summary(fit3)
load("C:/Users/user98/Desktop/ANN/R/.RData")
source('C:/Users/user98/Desktop/learning/stat3600/project.R')
fit=lm(logy$the.eletricity.sell.amount.per.day~.,data=X[bestcol])
df=rbind(X[bestcol],logy)
df=cbind(X[bestcol],logy)
View(df)
cv.lm(df = df, form.lm = formula(the.eletricity.sell.amount.per.day ~ .,data=df[bestcol]), m=61, dots =  FALSE, seed=29, plotit=TRUE, printit=TRUE)
install.packages("DAAG")
library(DAAG)
cv.lm(df = df, form.lm = formula(the.eletricity.sell.amount.per.day ~ .,data=df[bestcol]), m=61, dots =  FALSE, seed=29, plotit=TRUE, printit=TRUE)
data=df
cv.lm(df = data, form.lm = formula(the.eletricity.sell.amount.per.day ~ .,data=df[bestcol]), m=61, dots =  FALSE, seed=29, plotit=TRUE, printit=TRUE)
cv.lm(form.lm = formula(df$the.eletricity.sell.amount.per.day ~ .,data=df[bestcol]), m=61, dots =  FALSE, seed=29, plotit=TRUE, printit=TRUE)
bestcol
cv.lm(df = data, form.lm = formula(the.eletricity.sell.amount.per.day ~ Position+Sign+Other.mobile.operator+convinence.stores+shopping.mall+Price+Demand+Num.of.Charger.open.in.day.time+number.of.competitors..charger), m=61, dots =  FALSE, seed=29, plotit=TRUE, printit=TRUE)
cv.lm(df = df, form.lm = formula(the.eletricity.sell.amount.per.day ~ Position+Sign+Other.mobile.operator+convinence.stores+shopping.mall+Price+Demand+Num.of.Charger.open.in.day.time+number.of.competitors..charger), m=61, dots =  FALSE, seed=29, plotit=TRUE, printit=TRUE)
fit2= lm(the.eletricity.sell.amount.per.day ~ Position+Sign+Other.mobile.operator+convinence.stores+shopping.mall+Price+Demand+Num.of.Charger.open.in.day.time+number.of.competitors..charger)
fit2= lm(the.eletricity.sell.amount.per.day ~ Position+Sign+Other.mobile.operator+convinence.stores+shopping.mall+Price+Demand+Num.of.Charger.open.in.day.time+number.of.competitors..charger,df)
fit2
cv.lm(df = df, fit2, m=61, dots =  FALSE, seed=29, plotit=TRUE, printit=TRUE)
cv.lm(df = df, fit2, m=61)
fit=lm(logy$the.eletricity.sell.amount.per.day~.,data=X[bestcol])
a=fit$residuals
library()
library(ggplot2)
plot(a)
residual=a
plot(residual)
library(ggfortify)
install.packages("ggfortify")
library(ggfortify)
autoplot(fit)
cv.lm(data=df,fit,m=3)
fit2= lm(the.eletricity.sell.amount.per.day ~ Position+Sign+Other.mobile.operator+convinence.stores+shopping.mall+Price+Demand+Num.of.Charger.open.in.day.time+number.of.competitors..charger,df)
cv.lm(data=df,fit2,m=3)
cv.lm(data=df,fit2,m=61)
a=cv.lm(data=df,fit2,m=61)
a
summary(a)
l=a$Predicted-df$the.eletricity.sell.amount.per.day
plot(l)
autoplot(a)
View(a)
l=a$Predicted-a$Predicted
plot(l)
l=a$cvpred-a$Predicted
plot(l)
l=a$cvpred-a$the.eletricity.sell.amount.per.day
plot(l)
qqnorm(l)
e=a$cvpred-a$the.eletricity.sell.amount.per.day
qqnorm(e)
qqnorm(l)
qqnorm(e)
qqnorm(e,main = "CV prediction minus the actual comsuption")
qqnorm(e,main = "CV prediction minus the actual consumption")
qqnorm(l,main = "CV prediction minus the non-cv model prediction")
qqnorm(e,main = "CV prediction minus the actual comsuption")
qqnorm(l,main = "CV prediction minus the non-cv model prediction")
qqnorm(e,main = "CV prediction minus the actual comsuption")
source('C:/Users/user98/Desktop/learning/stat3600/project.R')
summary(fit
)
shapiro.test(l)
shapiro.test(fit$residuals)
fit=lm(logy$the.eletricity.sell.amount.per.day~.,data=X[bestcol])
shapiro.test(fit$residuals)
shapiro.test(l)
shapiro.test(e)
e=a$cvpred-a$Predicted
shapiro.test(e)
plot(e)
})
different=a$cvpred-a$Predicted
plot(e,main = "different between the cv prediction and the model prediction")
